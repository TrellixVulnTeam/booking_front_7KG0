{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\aleks\\\\ticket-booking-front\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./data-storage.service\";\nexport class PaymentService {\n  constructor(http, dataStorageService) {\n    this.http = http;\n    this.dataStorageService = dataStorageService;\n    this.stripePromise = loadStripe(environment.stripe);\n    this.baseUrl = \"http://localhost:7070/api/payment\";\n  }\n\n  pay(event, ticketsCategory, quantity) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const payment = {\n        name: event.name,\n        currency: 'usd',\n        amount: ticketsCategory.price,\n        quantity: quantity,\n        cancelUrl: 'http://localhost:4200/cancel',\n        successUrl: 'http://localhost:4200/success'\n      };\n      const stripe = yield _this.stripePromise;\n\n      _this.http.post(_this.baseUrl, payment).subscribe(data => {\n        const client_secret = data.client_secret;\n        stripe.redirectToCheckout({\n          sessionId: data.id\n        }).then(() => {\n          alert(\"success\");\n        }).catch(error => {\n          alert(error);\n        });\n      });\n    })();\n  }\n\n}\n\nPaymentService.ɵfac = function PaymentService_Factory(t) {\n  return new (t || PaymentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DataStorageService));\n};\n\nPaymentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PaymentService,\n  factory: PaymentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/aleks/ticket-booking-front/src/app/event/payment.service.ts"],"names":["loadStripe","environment","i0","i1","i2","PaymentService","constructor","http","dataStorageService","stripePromise","stripe","baseUrl","pay","event","ticketsCategory","quantity","payment","name","currency","amount","price","cancelUrl","successUrl","post","subscribe","data","client_secret","redirectToCheckout","sessionId","id","then","alert","catch","error","ɵfac","PaymentService_Factory","t","ɵɵinject","HttpClient","DataStorageService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,kBAAP,EAA2B;AAClC,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,aAAL,GAAqBT,UAAU,CAACC,WAAW,CAACS,MAAb,CAA/B;AACA,SAAKC,OAAL,GAAe,mCAAf;AACH;;AACKC,EAAAA,GAAG,CAACC,KAAD,EAAQC,eAAR,EAAyBC,QAAzB,EAAmC;AAAA;;AAAA;AACxC,YAAMC,OAAO,GAAG;AACZC,QAAAA,IAAI,EAAEJ,KAAK,CAACI,IADA;AAEZC,QAAAA,QAAQ,EAAE,KAFE;AAGZC,QAAAA,MAAM,EAAEL,eAAe,CAACM,KAHZ;AAIZL,QAAAA,QAAQ,EAAEA,QAJE;AAKZM,QAAAA,SAAS,EAAE,8BALC;AAMZC,QAAAA,UAAU,EAAE;AANA,OAAhB;AAQA,YAAMZ,MAAM,SAAS,KAAI,CAACD,aAA1B;;AACA,MAAA,KAAI,CAACF,IAAL,CAAUgB,IAAV,CAAe,KAAI,CAACZ,OAApB,EAA6BK,OAA7B,EACKQ,SADL,CACgBC,IAAD,IAAU;AACrB,cAAMC,aAAa,GAAGD,IAAI,CAACC,aAA3B;AACAhB,QAAAA,MAAM,CAACiB,kBAAP,CAA0B;AACtBC,UAAAA,SAAS,EAAEH,IAAI,CAACI;AADM,SAA1B,EAGKC,IAHL,CAGU,MAAM;AAAEC,UAAAA,KAAK,CAAC,SAAD,CAAL;AAAmB,SAHrC,EAIKC,KAJL,CAIYC,KAAD,IAAW;AAAEF,UAAAA,KAAK,CAACE,KAAD,CAAL;AAAe,SAJvC;AAKH,OARD;AAVwC;AAmB3C;;AA1BuB;;AA4B5B5B,cAAc,CAAC6B,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAI/B,cAAV,EAA0BH,EAAE,CAACmC,QAAH,CAAYlC,EAAE,CAACmC,UAAf,CAA1B,EAAsDpC,EAAE,CAACmC,QAAH,CAAYjC,EAAE,CAACmC,kBAAf,CAAtD,CAAP;AAAmG,CAA9J;;AACAlC,cAAc,CAACmC,KAAf,GAAuB,aAActC,EAAE,CAACuC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErC,cAAT;AAAyBsC,EAAAA,OAAO,EAAEtC,cAAc,CAAC6B,IAAjD;AAAuDU,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { loadStripe } from '@stripe/stripe-js';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./data-storage.service\";\r\nexport class PaymentService {\r\n    constructor(http, dataStorageService) {\r\n        this.http = http;\r\n        this.dataStorageService = dataStorageService;\r\n        this.stripePromise = loadStripe(environment.stripe);\r\n        this.baseUrl = \"http://localhost:7070/api/payment\";\r\n    }\r\n    async pay(event, ticketsCategory, quantity) {\r\n        const payment = {\r\n            name: event.name,\r\n            currency: 'usd',\r\n            amount: ticketsCategory.price,\r\n            quantity: quantity,\r\n            cancelUrl: 'http://localhost:4200/cancel',\r\n            successUrl: 'http://localhost:4200/success'\r\n        };\r\n        const stripe = await this.stripePromise;\r\n        this.http.post(this.baseUrl, payment)\r\n            .subscribe((data) => {\r\n            const client_secret = data.client_secret;\r\n            stripe.redirectToCheckout({\r\n                sessionId: data.id\r\n            })\r\n                .then(() => { alert(\"success\"); })\r\n                .catch((error) => { alert(error); });\r\n        });\r\n    }\r\n}\r\nPaymentService.ɵfac = function PaymentService_Factory(t) { return new (t || PaymentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DataStorageService)); };\r\nPaymentService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PaymentService, factory: PaymentService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}