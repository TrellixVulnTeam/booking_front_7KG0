{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\aleks\\\\ticket-booking-front\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PaymentService {\n  constructor(http) {\n    this.http = http;\n    this.stripePromise = loadStripe(environment.stripe);\n    this.baseUrl = \"http://localhost:7070/api/payment\";\n  }\n\n  pay(event, ticketsCategory, quantity) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const payment = {\n        name: event.name,\n        currency: 'usd',\n        amount: ticketsCategory.price,\n        quantity: quantity,\n        cancelUrl: 'http://localhost:4200/success',\n        successUrl: 'http://localhost:4200/success'\n      };\n      const stripe = yield _this.stripePromise;\n\n      _this.http.post(_this.baseUrl, payment).subscribe(data => {\n        stripe.redirectToCheckout({\n          sessionId: data.id\n        });\n      });\n    })();\n  }\n\n}\n\nPaymentService.ɵfac = function PaymentService_Factory(t) {\n  return new (t || PaymentService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nPaymentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PaymentService,\n  factory: PaymentService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/aleks/ticket-booking-front/src/app/event/payment.service.ts"],"names":["loadStripe","environment","i0","i1","PaymentService","constructor","http","stripePromise","stripe","baseUrl","pay","event","ticketsCategory","quantity","payment","name","currency","amount","price","cancelUrl","successUrl","post","subscribe","data","redirectToCheckout","sessionId","id","ɵfac","PaymentService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,aAAL,GAAqBP,UAAU,CAACC,WAAW,CAACO,MAAb,CAA/B;AACA,SAAKC,OAAL,GAAe,mCAAf;AACH;;AACKC,EAAAA,GAAG,CAACC,KAAD,EAAQC,eAAR,EAAyBC,QAAzB,EAAmC;AAAA;;AAAA;AACxC,YAAMC,OAAO,GAAG;AACZC,QAAAA,IAAI,EAAEJ,KAAK,CAACI,IADA;AAEZC,QAAAA,QAAQ,EAAE,KAFE;AAGZC,QAAAA,MAAM,EAAEL,eAAe,CAACM,KAHZ;AAIZL,QAAAA,QAAQ,EAAEA,QAJE;AAKZM,QAAAA,SAAS,EAAE,+BALC;AAMZC,QAAAA,UAAU,EAAE;AANA,OAAhB;AAQA,YAAMZ,MAAM,SAAS,KAAI,CAACD,aAA1B;;AACA,MAAA,KAAI,CAACD,IAAL,CAAUe,IAAV,CAAe,KAAI,CAACZ,OAApB,EAA6BK,OAA7B,EACKQ,SADL,CACgBC,IAAD,IAAU;AACrBf,QAAAA,MAAM,CAACgB,kBAAP,CAA0B;AACtBC,UAAAA,SAAS,EAAEF,IAAI,CAACG;AADM,SAA1B;AAGH,OALD;AAVwC;AAgB3C;;AAtBuB;;AAwB5BtB,cAAc,CAACuB,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAIzB,cAAV,EAA0BF,EAAE,CAAC4B,QAAH,CAAY3B,EAAE,CAAC4B,UAAf,CAA1B,CAAP;AAA+D,CAA1H;;AACA3B,cAAc,CAAC4B,KAAf,GAAuB,aAAc9B,EAAE,CAAC+B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE9B,cAAT;AAAyB+B,EAAAA,OAAO,EAAE/B,cAAc,CAACuB,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { loadStripe } from '@stripe/stripe-js';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class PaymentService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.stripePromise = loadStripe(environment.stripe);\r\n        this.baseUrl = \"http://localhost:7070/api/payment\";\r\n    }\r\n    async pay(event, ticketsCategory, quantity) {\r\n        const payment = {\r\n            name: event.name,\r\n            currency: 'usd',\r\n            amount: ticketsCategory.price,\r\n            quantity: quantity,\r\n            cancelUrl: 'http://localhost:4200/success',\r\n            successUrl: 'http://localhost:4200/success'\r\n        };\r\n        const stripe = await this.stripePromise;\r\n        this.http.post(this.baseUrl, payment)\r\n            .subscribe((data) => {\r\n            stripe.redirectToCheckout({\r\n                sessionId: data.id\r\n            });\r\n        });\r\n    }\r\n}\r\nPaymentService.ɵfac = function PaymentService_Factory(t) { return new (t || PaymentService)(i0.ɵɵinject(i1.HttpClient)); };\r\nPaymentService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PaymentService, factory: PaymentService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}